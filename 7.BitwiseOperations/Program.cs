Console.WriteLine("&(логическое умножение)");
int x1 = 2; //010
int y1 = 5;//101
Console.WriteLine(x1 & y1); // выведет 0

int x2 = 4; //100
int y2 = 5; //101
Console.WriteLine(x2 & y2); // выведет 4
/*
 * В первом случае у нас два числа 2 и 5. 
 * 2 в двоичном виде представляет число 010, а 5 - 101. 
 * Поразрядно умножим числа (0*1, 1*0, 0*1) и в итоге получим 000.

 * Во втором случае у нас вместо двойки число 4, 
 * у которого в первом разряде 1, так же как и у числа 5, 
 * поэтому в итоге получим (1*1, 0*0, 0 *1) = 100, то есть число 4 в десятичном формате.
 */
Console.WriteLine("");
Console.WriteLine("| (логическое сложение)");
int x3 = 2; //010
int y3 = 5;//101
Console.WriteLine(x3 | y3); // выведет 7 - 111
int x4 = 4; //100
int y4 = 5;//101
Console.WriteLine(x4 | y4); // выведет 5 - 101
/*
 * Похоже на логическое умножение, операция также производится по двоичным разрядам,
 * но теперь возвращается единица, если хотя бы у одного числа в данном разряде имеется единица. 
 */
Console.WriteLine("");

Console.WriteLine("^ (логическое исключающее ИЛИ - XOR)");
int x = 45; // Значение, которое надо зашифровать - в двоичной форме 101101
int key = 102; //Пусть это будет ключ - в двоичной форме 1100110

int encrypt = x ^ key; //Результатом будет число 1001011 или 75
Console.WriteLine($"Зашифрованное число: {encrypt}");

int decrypt = encrypt ^ key; // Результатом будет исходное число 45
Console.WriteLine($"Расшифрованное число: {decrypt}");
/*
 * Здесь опять же производятся поразрядные операции. 
 * Если у нас значения текущего разряда у обоих чисел разные, 
 * то возвращается 1, иначе возвращается 0. 
 * Таким образом, мы получаем из 9^5 в качестве результата число 12. 
 * И чтобы расшифровать число, мы применяем ту же операцию к результату.
 */
Console.WriteLine("");

Console.WriteLine("~ (логическое отрицание или инверсия)");
int x5 = 12;                 // 00001100
Console.WriteLine(~x5);      // 11110011   или -13
/*
 * Еще одна поразрядная операция, которая инвертирует все разряды: 
 * если значение разряда равно 1, то оно становится равным нулю, и наоборот.
 */
Console.WriteLine("");

Console.WriteLine("Представление отрицательных чисел");
/*Для записи чисел со знаком в C# применяется дополнительный код (two’s complement),
 * при котором старший разряд является знаковым.
 * Если его значение равно 0, то число положительное, 
 * и его двоичное представление не отличается от представления беззнакового числа. 
 * Например, 0000 0001 в десятичной системе 1.

Если старший разряд равен 1, то мы имеем дело с отрицательным числом. 
Например, 1111 1111 в десятичной системе представляет -1. Соответственно, 
1111 0011 представляет -13.
*/
int x6 = 12;
Console.WriteLine(x6);
int y6 = ~x6;
Console.WriteLine(y6);
y6 += 1;
Console.WriteLine(y6);   // -12

Console.WriteLine("Операции сдвига");
/* Операции сдвига также производятся над разрядами чисел. 
 * Сдвиг может происходить вправо и влево.

x<<y - сдвигает число x влево на y разрядов. 
Например, 4<<1 сдвигает число 4 (которое в двоичном представлении 100) на один разряд влево, 
то есть в итоге получается 1000 или число 8 в десятичном представлении.

x>>y - сдвигает число x вправо на y разрядов. Например, 
16>>1 сдвигает число 16 (которое в двоичном представлении 10000) на один разряд вправо, 
то есть в итоге получается 1000 или число 8 в десятичном представлении.

Таким образом, если исходное число, которое надо сдвинуть в ту или другую строну, 
делится на два, то фактически получается умножение или деление на два. 
Поэтому подобную операцию можно использовать вместо непосредственного 
умножения или деления на два. 
*/
int a = 16; // в двоичной форме 10000
int b = 2; // в двоичной форме
int c = a << b; // Сдвиг числа 10000 влево на 2 разряда, равно 1000000 или 64 в десятичной системе

Console.WriteLine($"Зашифрованное число: {c}");    // 64

int d = a >> b; // Сдвиг числа 10000 вправо на 2 разряда, равно 100 или 4 в десятичной системе
Console.WriteLine($"Зашифрованное число: {d}");     // 4

int a1 = 22; // в двоичной форме 10110
int b1 = 2; // в двоичной форме
int c1 = a1 << b1; // Сдвиг числа 10110 влево на 2 разряда, равно 1011000 или 88 в десятичной системе

Console.WriteLine($"Зашифрованное число: {c1}");    // 88

int d1 = a1 >> b1; // Сдвиг числа 10110 вправо на 2 разряда, равно 101 или 5 в десятичной системе
Console.WriteLine($"Зашифрованное число: {d1}");     // 5